# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import monitor_pb2 as monitor__pb2


class MonitorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerRequest = channel.unary_unary(
                '/monitor.MonitorService/registerRequest',
                request_serializer=monitor__pb2.RegisterRequestMessage.SerializeToString,
                response_deserializer=monitor__pb2.RegisterRequestResponse.FromString,
                )
        self.registerBranch = channel.unary_unary(
                '/monitor.MonitorService/registerBranch',
                request_serializer=monitor__pb2.RegisterBranchMessage.SerializeToString,
                response_deserializer=monitor__pb2.RegisterBranchResponse.FromString,
                )
        self.registerBranches = channel.unary_unary(
                '/monitor.MonitorService/registerBranches',
                request_serializer=monitor__pb2.RegisterBranchesMessage.SerializeToString,
                response_deserializer=monitor__pb2.RegisterBranchesResponse.FromString,
                )
        self.closeBranch = channel.unary_unary(
                '/monitor.MonitorService/closeBranch',
                request_serializer=monitor__pb2.CloseBranchMessage.SerializeToString,
                response_deserializer=monitor__pb2.Empty.FromString,
                )
        self.waitRequest = channel.unary_unary(
                '/monitor.MonitorService/waitRequest',
                request_serializer=monitor__pb2.WaitRequestMessage.SerializeToString,
                response_deserializer=monitor__pb2.Empty.FromString,
                )
        self.checkRequest = channel.unary_unary(
                '/monitor.MonitorService/checkRequest',
                request_serializer=monitor__pb2.CheckRequestMessage.SerializeToString,
                response_deserializer=monitor__pb2.CheckRequestResponse.FromString,
                )
        self.checkRequestByRegions = channel.unary_unary(
                '/monitor.MonitorService/checkRequestByRegions',
                request_serializer=monitor__pb2.CheckRequestByRegionsMessage.SerializeToString,
                response_deserializer=monitor__pb2.CheckRequestByRegionsResponse.FromString,
                )
        self.getPreventedInconsistencies = channel.unary_unary(
                '/monitor.MonitorService/getPreventedInconsistencies',
                request_serializer=monitor__pb2.Empty.SerializeToString,
                response_deserializer=monitor__pb2.GetPreventedInconsistenciesResponse.FromString,
                )


class MonitorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerBranches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def waitRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkRequestByRegions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPreventedInconsistencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.registerRequest,
                    request_deserializer=monitor__pb2.RegisterRequestMessage.FromString,
                    response_serializer=monitor__pb2.RegisterRequestResponse.SerializeToString,
            ),
            'registerBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.registerBranch,
                    request_deserializer=monitor__pb2.RegisterBranchMessage.FromString,
                    response_serializer=monitor__pb2.RegisterBranchResponse.SerializeToString,
            ),
            'registerBranches': grpc.unary_unary_rpc_method_handler(
                    servicer.registerBranches,
                    request_deserializer=monitor__pb2.RegisterBranchesMessage.FromString,
                    response_serializer=monitor__pb2.RegisterBranchesResponse.SerializeToString,
            ),
            'closeBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.closeBranch,
                    request_deserializer=monitor__pb2.CloseBranchMessage.FromString,
                    response_serializer=monitor__pb2.Empty.SerializeToString,
            ),
            'waitRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.waitRequest,
                    request_deserializer=monitor__pb2.WaitRequestMessage.FromString,
                    response_serializer=monitor__pb2.Empty.SerializeToString,
            ),
            'checkRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.checkRequest,
                    request_deserializer=monitor__pb2.CheckRequestMessage.FromString,
                    response_serializer=monitor__pb2.CheckRequestResponse.SerializeToString,
            ),
            'checkRequestByRegions': grpc.unary_unary_rpc_method_handler(
                    servicer.checkRequestByRegions,
                    request_deserializer=monitor__pb2.CheckRequestByRegionsMessage.FromString,
                    response_serializer=monitor__pb2.CheckRequestByRegionsResponse.SerializeToString,
            ),
            'getPreventedInconsistencies': grpc.unary_unary_rpc_method_handler(
                    servicer.getPreventedInconsistencies,
                    request_deserializer=monitor__pb2.Empty.FromString,
                    response_serializer=monitor__pb2.GetPreventedInconsistenciesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'monitor.MonitorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/registerRequest',
            monitor__pb2.RegisterRequestMessage.SerializeToString,
            monitor__pb2.RegisterRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/registerBranch',
            monitor__pb2.RegisterBranchMessage.SerializeToString,
            monitor__pb2.RegisterBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/registerBranches',
            monitor__pb2.RegisterBranchesMessage.SerializeToString,
            monitor__pb2.RegisterBranchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/closeBranch',
            monitor__pb2.CloseBranchMessage.SerializeToString,
            monitor__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def waitRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/waitRequest',
            monitor__pb2.WaitRequestMessage.SerializeToString,
            monitor__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/checkRequest',
            monitor__pb2.CheckRequestMessage.SerializeToString,
            monitor__pb2.CheckRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkRequestByRegions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/checkRequestByRegions',
            monitor__pb2.CheckRequestByRegionsMessage.SerializeToString,
            monitor__pb2.CheckRequestByRegionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPreventedInconsistencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor.MonitorService/getPreventedInconsistencies',
            monitor__pb2.Empty.SerializeToString,
            monitor__pb2.GetPreventedInconsistenciesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
