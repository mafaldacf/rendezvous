syntax = "proto3";

package rendezvous;

service ClientService {
  /* Streaming */
  rpc SubscribeBranches(SubscribeBranchesMessage) returns (stream SubscribeBranchesResponse);
  rpc CloseBranches(stream CloseBranchMessage) returns (Empty);

  /* Unary RPCs */
  rpc RegisterRequest(RegisterRequestMessage) returns (RegisterRequestResponse);
  rpc RegisterBranch(RegisterBranchMessage) returns (RegisterBranchResponse);
  rpc RegisterBranches(RegisterBranchesMessage) returns (RegisterBranchesResponse);
  rpc CloseBranch(CloseBranchMessage) returns (Empty);
  rpc WaitRequest(WaitRequestMessage) returns (WaitRequestResponse);
  rpc CheckRequest(CheckRequestMessage) returns (CheckRequestResponse);
  rpc CheckRequestByRegions(CheckRequestByRegionsMessage) returns (CheckRequestByRegionsResponse);
  rpc GetNumPreventedInconsistencies(Empty) returns (GetNumPreventedInconsistenciesResponse);
}

/* Helpers */

enum RequestStatus {
  OPENED = 0;
  CLOSED = 1;
  UNKNOWN = 2;
}

message Empty {

}

message RequestContext {
  map<string, int32> versions = 1;
}

/* Publish-Subscribe */

message SubscribeBranchesMessage {
  string service = 1;
  string tag = 2;
  string region = 3;
}

message SubscribeBranchesResponse {
  string bid = 1;
}

/* Register Request */

message RegisterRequestMessage {
  string rid = 1;
}

message RegisterRequestResponse {
  string rid = 1;
  RequestContext context = 2;
}

/* Register Branch */

message RegisterBranchMessage {
  string rid = 1;
  string service = 2;
  string tag = 3;
  string region = 4;
  RequestContext context = 5;
}

message RegisterBranchResponse {
  string rid = 1;
  string bid = 2;
  RequestContext context = 3;
}

/* Registers Branches */

message RegisterBranchesMessage {
  string rid = 1;
  string service = 2;
  string tag = 3;
  repeated string regions = 4;
  RequestContext context = 5;
}

message RegisterBranchesResponse {
  string rid = 1;
  string bid = 2;
  RequestContext context = 3;
}

/* Close Branch */

message CloseBranchMessage {
  string bid = 1;
  string region = 2;
  RequestContext context = 3;
}

/* Wait Request */

message WaitRequestMessage {
  string rid = 1;
  string service = 2;
  string region = 3;
  int32 timeout = 4;
  RequestContext context = 5;
}

message WaitRequestResponse {
  bool prevented_inconsistency = 1;
}

/* Check Request */

message CheckRequestMessage {
  string rid = 1;
  string service = 2;
  string region = 3;
  RequestContext context = 4;
}

message CheckRequestResponse {
  RequestStatus status = 1;
}

/* Check Request by Regions */

message CheckRequestByRegionsMessage {
  string rid = 1;
  string service = 2;
  RequestContext context = 4;
}

message CheckRequestByRegionsResponse {
  map<string, RequestStatus> statuses = 1;
}

/* Get Prevented Inconsistencies */

message GetNumPreventedInconsistenciesResponse {
  int64 inconsistencies = 1;
}