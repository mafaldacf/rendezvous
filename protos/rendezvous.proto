syntax = "proto3";

package rendezvous;

service RendezvousService {
  rpc registerRequest(RegisterRequestMessage) returns (RegisterRequestResponse);
  rpc registerBranch(RegisterBranchMessage) returns (RegisterBranchResponse);
  rpc registerBranches(RegisterBranchesMessage) returns (RegisterBranchesResponse);
  rpc closeBranch(CloseBranchMessage) returns (Empty);
  rpc waitRequest(WaitRequestMessage) returns (WaitRequestResponse);
  rpc checkRequest(CheckRequestMessage) returns (CheckRequestResponse);
  rpc checkRequestByRegions(CheckRequestByRegionsMessage) returns (CheckRequestByRegionsResponse);
  rpc getPreventedInconsistencies(Empty) returns (GetPreventedInconsistenciesResponse);
}

/* Helpers */

enum RequestStatus {
  OPENED = 0;
  CLOSED = 1;
  NOT_FOUND = 2;
}

message Empty {

}

message RequestContext {
  map<string, int32> versions = 1;
}

/* Register Request */

message RegisterRequestMessage {
  string rid = 1;
}

message RegisterRequestResponse {
  string rid = 1;
  RequestContext context = 2;
}

/* Register Branch */

message RegisterBranchMessage {
  string rid = 1;
  string service = 2;
  string region = 3;
  RequestContext context = 4;
}

message RegisterBranchResponse {
  string rid = 1;
  string bid = 2;
  RequestContext context = 3;
}

/* Registers Branches */

message RegisterBranchesMessage {
  string rid = 1;
  string service = 2;
  repeated string regions = 3;
  RequestContext context = 4;
}

message RegisterBranchesResponse {
  string rid = 1;
  string bid = 2;
  RequestContext context = 3;
}

/* Close Branch */

message CloseBranchMessage {
  string rid = 1;
  string bid = 2;
  string region = 3;
}

/* Wait Request */

message WaitRequestMessage {
  string rid = 1;
  string service = 2;
  string region = 3;
  RequestContext context = 4;
}

message WaitRequestResponse {
  bool prevented_inconsistency = 1;
}

/* Check Request */

message CheckRequestMessage {
  string rid = 1;
  string service = 2;
  string region = 3;
  RequestContext context = 4;
}

message CheckRequestResponse {
  RequestStatus status = 1;
}

/* Check Request by Regions */

message CheckRequestByRegionsMessage {
  string rid = 1;
  string service = 2;
  RequestContext context = 4;
}

message CheckRequestByRegionsResponse {
  map<string, RequestStatus> statuses = 1;
}

/* Get Prevented Inconsistencies */

message GetPreventedInconsistenciesResponse {
  int64 inconsistencies = 1;
}